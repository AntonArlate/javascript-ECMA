/*
Сначала это просто пример использования метода t3 была.
Затем я попытался найти способ заставить браузер дождаться выполнения этого файла скрипта перед следующим.
Удалось только используя Promise.all() создать область кода которая будет дожидаться завершения всех задач не зависимо от продолжительности каждой отдельной.
Однако браузер запускает Promise.all() асинхронно и в итоге считает скрипт выполненым сразуже.

Наверное решением было бы обернуть весь скрипт в функцию, затем их все загрузить в HTML. А потом неким встроеным в HTML скриптом по событию полной загрузки создать новую асинхронную функцию, внутри которой браузер возможно позволит использовать await.
*/

function changeStyleDelayed(text, delay) {
    return new Promise(resolve => {
        setTimeout(() => {
            const element = text;
            if (element) {
                // тут можно было оперировать классами
                console.log(element);
            }
            resolve(); // Разрешение промиса после выполнения задержки
        }, delay);
    });
}

const tasks = [
    changeStyleDelayed("первый 1", 2000),
    changeStyleDelayed("второй 2", 1000),
    changeStyleDelayed("третий 3", 3000)
];

async function awaitAll(tasks) {
    try {
        await Promise.all(tasks);
        console.log('Все задачи выполнены');
    } catch (error) {
        console.error(error);
    }
}

awaitAll(tasks);

